const User = require('../models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const logAdminAction = require('../utils/logAdminAction');

// T·∫°o JWT token
const generateToken = (userId, username) => {
  return jwt.sign(
    { 
      userId, 
      username 
    }, 
    process.env.JWT_SECRET, 
    { 
      expiresIn: process.env.JWT_EXPIRES_IN || '24h'
    }
  );
};

// Ghi log ho·∫°t ƒë·ªông admin


// ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({
        success: false,
        message: 'Username v√† password l√† b·∫Øt bu·ªôc'
      });
    }

    // T√¨m user
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
      });
    }

    // Ki·ªÉm tra password
    const isPasswordValid = await user.comparePassword(password);
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
      });
    }

    // T·∫°o token
    const token = generateToken(user._id,user.username);

    res.json({
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        token,
        user: {
          id: user._id,
          username: user.username,
          role: user.role
        }
      }
    });

  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
};

// T·∫°o t√†i kho·∫£n (ch·ªâ SuperAdmin)
const createAccount = async (req, res) => {
  try {
    const { username, password, role = 'Admin' } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({
        success: false,
        message: 'Username v√† password l√† b·∫Øt bu·ªôc'
      });
    }

    if (username.length < 3) {
      return res.status(400).json({
        success: false,
        message: 'Username ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±'
      });
    }

    if (password.length < 4) {
      return res.status(400).json({
        success: false,
        message: 'Password ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±'
      });
    }

    if (!['Admin', 'SuperAdmin'].includes(role)) {
      return res.status(400).json({
        success: false,
        message: 'Role ph·∫£i l√† Admin ho·∫∑c SuperAdmin'
      });
    }

    // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: 'Username ƒë√£ t·ªìn t·∫°i'
      });
    }

    // T·∫°o user m·ªõi
    const newUser = new User({
      username,
      passwordHash: password, // S·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông b·ªüi pre-save middleware
      role
    });

    await newUser.save();


    // Ghi log
    await logAdminAction(
      req.user._id, 
      req.user.username, 
      'T·∫°o t√†i kho·∫£n m·ªõi', 
      username,
      { role }
    );

    res.status(201).json({
      success: true,
      message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng',
      data: {
        user: {
          id: newUser._id,
          username: newUser.username,
          role: newUser.role
        }
      }
    });

  } catch (error) {
    console.error('L·ªói t·∫°o t√†i kho·∫£n:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
};

// L·∫•y th√¥ng tin user hi·ªán t·∫°i
const getCurrentUser = async (req, res) => {
  try {
    res.json({
      success: true,
      data: {
        user: {
          id: req.user._id,
          username: req.user.username,
          role: req.user.role
        }
      }
    });
  } catch (error) {
    console.error('L·ªói l·∫•y th√¥ng tin user:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
};

// ƒêƒÉng xu·∫•t
const logout = async (req, res) => {
  try {
    // Ghi log
    await logAdminAction(req.user._id, req.user.username, 'ƒêƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng');

    res.json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
};

// L·∫•y danh s√°ch users (ch·ªâ SuperAdmin)
const getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select('-passwordHash').sort({ createdAt: -1 });
    
    res.json({
      success: true,
      data: { users }
    });
  } catch (error) {
    console.error('L·ªói l·∫•y danh s√°ch users:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
};

// L·∫•y logs
const getAdminLogs = async (req, res) => {
  try {
    const { page = 1, limit = 20 } = req.query;
    
    const logs = await AdminLog.find()
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await AdminLog.countDocuments();

    res.json({
      success: true,
      data: {
        logs,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / limit)
        }
      }
    });
  } catch (error) {
    console.error('L·ªói l·∫•y logs:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
};

const changePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;

    if (!oldPassword || !newPassword) {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈© v√† m·∫≠t kh·∫©u m·ªõi"
      });
    }

    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isMatch = await user.comparePassword(oldPassword);
    if (!isMatch) {
      return res.status(400).json({
        success: false,
        message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng"
      });
    }

    // üöÄ G√°n tr·ª±c ti·∫øp, middleware s·∫Ω hash
    user.passwordHash = newPassword;

    await user.save();

    return res.status(200).json({
      success: true,
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"
    });

  } catch (error) {
    console.error("Error changing password:", error);
    return res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u"
    });
  }
};

const updateUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const { username, role, password  } = req.body;

    // Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // Kh√¥ng cho ph√©p user th∆∞·ªùng s·ª≠a SuperAdmin
    if (user.role === 'SuperAdmin' && req.user.role !== 'SuperAdmin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn s·ª≠a SuperAdmin'
      });
    }

    // Kh√¥ng cho ph√©p user t·ª± h·∫° c·∫•p quy·ªÅn c·ªßa m√¨nh
    if (userId === req.user.id && role && role !== user.role) {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi quy·ªÅn c·ªßa ch√≠nh m√¨nh'
      });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    const updateData = {};
    if (username) updateData.username = username;
    if (role) updateData.role = role;
    if (password) {
      const salt = await bcrypt.genSalt(10);
      updateData.passwordHash = await bcrypt.hash(password, salt);
    }

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      updateData,
      { 
        new: true,
        runValidators: true 
      }
    ).select('-passwordHash');

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t user th√†nh c√¥ng',
      data: updatedUser
    });

    await logAdminAction(req.user._id, req.user.username, 'C·∫≠p nh·∫≠t user', updatedUser.username);

  } catch (error) {
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: 'Username ƒë√£ t·ªìn t·∫°i'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t user',
      error: error.message
    });
  }
};

// X√≥a user
const deleteUser = async (req, res) => {
  try {
    const { userId } = req.params;

    // Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // Kh√¥ng cho ph√©p x√≥a ch√≠nh m√¨nh
    if (userId === req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh'
      });
    }

    // Kh√¥ng cho ph√©p user th∆∞·ªùng x√≥a SuperAdmin
    if (user.role === 'SuperAdmin' && req.user.role !== 'SuperAdmin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn x√≥a SuperAdmin'
      });
    }

    // Ki·ªÉm tra c√≥ ph·∫£i SuperAdmin cu·ªëi c√πng kh√¥ng
    if (user.role === 'SuperAdmin') {
      const superAdminCount = await User.countDocuments({ role: 'SuperAdmin' });
      if (superAdminCount <= 1) {
        return res.status(403).json({
          success: false,
          message: 'Kh√¥ng th·ªÉ x√≥a SuperAdmin cu·ªëi c√πng'
        });
      }
    }

    await User.findByIdAndDelete(userId);
    await logAdminAction(req.user._id, req.user.username, 'X√≥a user', user.username);

    res.json({
      success: true,
      message: 'X√≥a user th√†nh c√¥ng'
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi x√≥a user',
      error: error.message
    });
  }
};


module.exports = {
  login,
  createAccount,
  getCurrentUser,
  logout,
  getAllUsers,
  getAdminLogs,
  changePassword,
  updateUser,
  deleteUser
};