// src/api/socket.js - Long Polling thay WebSocket
import apiClient from "./client.js";

class SocketAPI {
  constructor() {
    this.pollingInterval = null;
    this.heartbeatInterval = null;
    this.sessionId = null;
    this.isPolling = false;
    this.listeners = new Map(); // event -> callback[]
  }

  // B·∫Øt ƒë·∫ßu polling thay connect()
  connect(token) {
    // N·∫øu ƒëang polling, disconnect tr∆∞·ªõc r·ªìi connect l·∫°i
    if (this.isPolling) {
      console.log('‚ö†Ô∏è Already polling, reconnecting...');
      this.stopPollingOnly(); // Ch·ªâ stop interval, kh√¥ng g·ªçi API logout
    }

    console.log('üîÑ Starting long polling...');
    this.isPolling = true;
    
    // G·ª≠i heartbeat m·ªói 10 gi√¢y
    this.startHeartbeat();
    
    // Poll users online m·ªói 5 gi√¢y
    this.startPolling();
    
    // Trigger connect event
    setTimeout(() => {
      this.emit('connect');
    }, 100);

    return this;
  }

  // Heartbeat ƒë·ªÉ b√°o server m√¨nh c√≤n online
  startHeartbeat() {
    this.heartbeatInterval = setInterval(async () => {
      try {
        const res = await apiClient.post('/online-users/heartbeat', {
          sessionId: this.sessionId
        });
        
        if (res.data.success) {
          this.sessionId = res.data.data.sessionId;
        }
      } catch (error) {
        console.error('‚ùå Heartbeat failed:', error);
        // N·∫øu heartbeat fail, trigger disconnect
        if (error.response?.status === 401 || error.response?.status === 403) {
          this.disconnect();
          this.emit('disconnect', 'auth_error');
        }
      }
    }, 10000); // 10 gi√¢y
  }

  // Polling ƒë·ªÉ l·∫•y danh s√°ch users online
  startPolling() {
    // G·ªçi ngay l·∫ßn ƒë·∫ßu
    this.pollOnlineUsers();

    // Sau ƒë√≥ poll m·ªói 5 gi√¢y
    this.pollingInterval = setInterval(() => {
      this.pollOnlineUsers();
    }, 5000);
  }

  async pollOnlineUsers() {
    try {
      const res = await apiClient.get('/online-users');
      
      if (res.data.success) {
        // Trigger event gi·ªëng WebSocket
        this.emit('users_online_update', res.data.data);
      }
    } catch (error) {
      console.error('‚ùå Poll failed:', error);
      
      if (error.response?.status === 401 || error.response?.status === 403) {
        this.disconnect();
        this.emit('disconnect', 'auth_error');
      } else {
        this.emit('connect_error', error);
      }
    }
  }

  // L·∫•y danh s√°ch users online (REST API)
  async getOnlineUsers() {
    try {
      const res = await apiClient.get('/online-users');
      return res.data;
    } catch (error) {
      console.error('‚ùå Get online users failed:', error);
      throw error;
    }
  }

  // Ki·ªÉm tra user c√≥ online kh√¥ng
  async checkUserOnline(userId) {
    try {
      const res = await apiClient.get(`/online-users/check/${userId}`);
      return res.data;
    } catch (error) {
      console.error('‚ùå Check user online failed:', error);
      throw error;
    }
  }

  // G·ª≠i message (qua REST API thay socket.emit)
  async sendMessage(targetUserId, message) {
    try {
      // B·∫°n c·∫ßn th√™m endpoint n√†y v√†o backend n·∫øu c·∫ßn
      const res = await apiClient.post('/socket/send-message', { 
        targetUserId, 
        message 
      });
      return res.data;
    } catch (error) {
      console.error('‚ùå Send message failed:', error);
      throw error;
    }
  }

  // ƒêƒÉng k√Ω l·∫Øng nghe event (gi·ªëng socket.on)
  on(event, callback) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event).push(callback);
  }

  // X√≥a listener
 // X√≥a listener
off(event, callback) {
  if (!this.listeners.has(event)) return;
  
  // N·∫øu kh√¥ng truy·ªÅn callback, x√≥a T·∫§T C·∫¢ listeners c·ªßa event ƒë√≥
  if (!callback) {
    this.listeners.delete(event);
    return;
  }
  
  // N·∫øu c√≥ callback, ch·ªâ x√≥a callback ƒë√≥
  const callbacks = this.listeners.get(event);
  const index = callbacks.indexOf(callback);
  if (index > -1) {
    callbacks.splice(index, 1);
  }
}

  // Trigger event (internal)
  emit(event, data) {
    if (!this.listeners.has(event)) return;
    
    this.listeners.get(event).forEach(callback => {
      try {
        callback(data);
      } catch (error) {
        console.error(`‚ùå Error in ${event} listener:`, error);
      }
    });
  }

  
 // TH√äM function n√†y v√†o class SocketAPI (TR∆Ø·ªöC function disconnect)
stopPollingOnly() {
  if (this.pollingInterval) {
    clearInterval(this.pollingInterval);
    this.pollingInterval = null;
  }
  
  if (this.heartbeatInterval) {
    clearInterval(this.heartbeatInterval);
    this.heartbeatInterval = null;
  }
}

// Function disconnect s·ª≠ d·ª•ng stopPollingOnly
async disconnect() {
  console.log('üîå Disconnecting...');
  
  this.stopPollingOnly();

  try {
    await apiClient.post('/online-users/logout');
    console.log('‚úÖ Logged out successfully');
  } catch (error) {
    console.warn('‚ö†Ô∏è Logout API failed (ignored):', error.message);
  }

  this.isPolling = false;
  this.sessionId = null;
  
  this.emit('disconnect', 'client_disconnect');
}
  // Ki·ªÉm tra ƒë√£ k·∫øt n·ªëi ch∆∞a
  isConnected() {
    return this.isPolling;
  }

  // Legacy method ƒë·ªÉ t∆∞∆°ng th√≠ch code c≈©
  getSocket() {
    return this;
  }
}

// Export singleton instance
const socketAPI = new SocketAPI();
export default socketAPI;